// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generateManifest errors should generate common errors in domain 1`] = `
"export declare namespace domain {
    namespace v_1_0_0 {
        class HamburgerError extends Error {
            constructor(message: string);
        }
        class CommonError extends Error {
            constructor(message: string);
        }
        class ArticleError extends Error {
            constructor(message: string);
        }
    }
}
export declare namespace hamburgerService {
    namespace v_1_0_0 {
        function getHamburger(): Promise<string>;
        function setHamburger(): Promise<string>;
    }
}
export declare namespace articleService {
    namespace v_1_0_0 {
        function getArticle(): Promise<string>;
        function setArticle(): Promise<string>;
    }
}"
`;

exports[`generateManifest errors should generate multi-service multi-error 1`] = `
"export declare namespace domain {
    namespace v_1_0_0 {
        class HamburgerError extends Error {
            constructor(message: string);
        }
        class ArticleError extends Error {
            constructor(message: string);
        }
    }
}
export declare namespace hamburgerService {
    namespace v_1_0_0 {
        function getHamburger(): Promise<string>;
    }
}
export declare namespace articleService {
    namespace v_1_0_0 {
        function getArticle(): Promise<string>;
    }
}"
`;

exports[`generateManifest errors should generate properties on generated error classes 1`] = `
"export declare namespace domain {
    namespace v_1_0_0 {
        class ArticleError extends Error {
            constructor(message: string, myPublicProp: number, myProp: number);
        }
    }
}
export declare namespace articleService {
    namespace v_1_0_0 {
        function getArticle(): Promise<string>;
    }
}"
`;

exports[`generateManifest errors should generate service error 1`] = `
"export declare namespace domain {
    namespace v_1_0_0 {
        class ArticleError extends Error {
            constructor(message: string);
        }
    }
}
export declare namespace articleService {
    namespace v_1_0_0 {
        function getArticle(): Promise<string>;
    }
}"
`;

exports[`generateManifest middleware should parse middleware 1`] = `
"export declare namespace domain {
    namespace v_1_0_0 {
        interface User {
            uid: string;
        }
    }
}
export declare namespace phero {
    type PheroContext<T> = T;
}
export declare namespace articleService {
    namespace v_1_0_0 {
        function getArticle(ctx: phero.PheroContext<{
            uid: string;
        }>, aap: string): Promise<string>;
    }
}"
`;

exports[`generateManifest typeAliases jasper 1`] = `
"export declare namespace domain {
    namespace v_1_0_0 {
        interface X {
            type: \\"x\\";
        }
        interface Y {
            type: \\"y\\";
        }
        type Z = X | Y;
        interface B {
            [key: string]: Z;
        }
        interface A {
            b: B;
        }
    }
}
export declare namespace articleService {
    namespace v_1_0_0 {
        function example(a: domain.v_1_0_0.A): Promise<void>;
    }
}"
`;

exports[`generateManifest typeAliases type aliases to native array types 1`] = `
"export declare namespace domain {
    namespace v_1_0_0 {
        type AadReturnType1 = string[];
    }
}
export declare namespace articleService {
    namespace v_1_0_0 {
        function getArticle(): Promise<domain.v_1_0_0.AadReturnType1>;
    }
}"
`;

exports[`generateManifest typeAliases type aliases to native types 1`] = `
"export declare namespace domain {
    namespace v_1_0_0 {
        type AadReturnType2 = boolean;
    }
}
export declare namespace articleService {
    namespace v_1_0_0 {
        function getArticle(): Promise<{
            aad: domain.v_1_0_0.AadReturnType2;
        }>;
    }
}"
`;

exports[`generateManifest typeAliases type aliases which are aliases of aliases 1`] = `
"export declare namespace domain {
    namespace v_1_0_0 {
        type TypeReal = {
            x: number;
        };
        type TypeRef = TypeReal;
        type Result = TypeRef;
    }
}
export declare namespace workoutRoutineService {
    namespace v_1_0_0 {
        function getRoutine(versionId: string): Promise<domain.v_1_0_0.Result>;
    }
}"
`;
