// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Parsers for a type alias object literal boolean array member 1`] = `
"export class MyModelParser {
    static parse(data: any): ParseResult<MyModel> {
        const errors: ValidationError[] = [];
        let result: any;
        if (typeof data !== \\"object\\" || data === null) {
            errors.push({
                path: \\"data\\",
                message: \`null or not an object\`
            });
        }
        else {
            result = {};
            if (typeof data[\\"a\\"] !== \\"object\\" || data[\\"a\\"] === null) {
                errors.push({
                    path: \\"data.a\\",
                    message: \`not an array\`
                });
            }
            else {
                result[\\"a\\"] = [];
                for (let it_0 = 0; it_0 < data[\\"a\\"].length; it_0++)
                    if (typeof data[\\"a\\"][it_0] !== \\"boolean\\") {
                        errors.push({
                            path: \`data.a[\${it_0}]\`,
                            message: \`not a boolean\`
                        });
                    }
                    else
                        result[\\"a\\"][it_0] = data[\\"a\\"][it_0];
            }
        }
        if (errors.length) {
            return {
                ok: false,
                errors
            };
        }
        return {
            ok: true,
            result: result as MyModel
        };
    }
}"
`;

exports[`Parsers for a type alias object literal boolean member 1`] = `
"export class MyModelParser {
    static parse(data: any): ParseResult<MyModel> {
        const errors: ValidationError[] = [];
        let result: any;
        if (typeof data !== \\"object\\" || data === null) {
            errors.push({
                path: \\"data\\",
                message: \`null or not an object\`
            });
        }
        else {
            result = {};
            if (typeof data[\\"a\\"] !== \\"boolean\\") {
                errors.push({
                    path: \\"data.a\\",
                    message: \`not a boolean\`
                });
            }
            else
                result[\\"a\\"] = data[\\"a\\"];
        }
        if (errors.length) {
            return {
                ok: false,
                errors
            };
        }
        return {
            ok: true,
            result: result as MyModel
        };
    }
}"
`;

exports[`Parsers for a type alias object literal deep nested object 1`] = `
"export class MyModelParser {
    static parse(data: any): ParseResult<MyModel> {
        const errors: ValidationError[] = [];
        let result: any;
        if (typeof data !== \\"object\\" || data === null) {
            errors.push({
                path: \\"data\\",
                message: \`null or not an object\`
            });
        }
        else {
            result = {};
            if (typeof data[\\"a\\"] !== \\"object\\" || data[\\"a\\"] === null) {
                errors.push({
                    path: \\"data.a\\",
                    message: \`null or not an object\`
                });
            }
            else {
                result[\\"a\\"] = {};
                if (data[\\"a\\"][\\"b\\"] !== undefined)
                    if (typeof data[\\"a\\"][\\"b\\"] !== \\"object\\" || data[\\"a\\"][\\"b\\"] === null) {
                        errors.push({
                            path: \\"data.a.b\\",
                            message: \`not an array\`
                        });
                    }
                    else {
                        result[\\"a\\"][\\"b\\"] = [];
                        for (let it_0 = 0; it_0 < data[\\"a\\"][\\"b\\"].length; it_0++)
                            if (typeof data[\\"a\\"][\\"b\\"][it_0] !== \\"object\\" || data[\\"a\\"][\\"b\\"][it_0] === null) {
                                errors.push({
                                    path: \`data.a.b[\${it_0}]\`,
                                    message: \`null or not an object\`
                                });
                            }
                            else {
                                result[\\"a\\"][\\"b\\"][it_0] = {};
                                if (typeof data[\\"a\\"][\\"b\\"][it_0][\\"c\\"] !== \\"object\\" || data[\\"a\\"][\\"b\\"][it_0][\\"c\\"] === null) {
                                    errors.push({
                                        path: \`data.a.b[\${it_0}].c\`,
                                        message: \`null or not an object\`
                                    });
                                }
                                else {
                                    result[\\"a\\"][\\"b\\"][it_0][\\"c\\"] = {};
                                    if (data[\\"a\\"][\\"b\\"][it_0][\\"c\\"][\\"d\\"] !== undefined)
                                        if (typeof data[\\"a\\"][\\"b\\"][it_0][\\"c\\"][\\"d\\"] !== \\"number\\") {
                                            errors.push({
                                                path: \`data.a.b[\${it_0}].c.d\`,
                                                message: \`not a number\`
                                            });
                                        }
                                        else if (isNaN(data[\\"a\\"][\\"b\\"][it_0][\\"c\\"][\\"d\\"])) {
                                            errors.push({
                                                path: \`data.a.b[\${it_0}].c.d\`,
                                                message: \`invalid number\`
                                            });
                                        }
                                        else
                                            result[\\"a\\"][\\"b\\"][it_0][\\"c\\"][\\"d\\"] = data[\\"a\\"][\\"b\\"][it_0][\\"c\\"][\\"d\\"];
                                }
                            }
                    }
            }
        }
        if (errors.length) {
            return {
                ok: false,
                errors
            };
        }
        return {
            ok: true,
            result: result as MyModel
        };
    }
}"
`;

exports[`Parsers for a type alias object literal null member 1`] = `
"export class MyModelParser {
    static parse(data: any): ParseResult<MyModel> {
        const errors: ValidationError[] = [];
        let result: any;
        if (typeof data !== \\"object\\" || data === null) {
            errors.push({
                path: \\"data\\",
                message: \`null or not an object\`
            });
        }
        else {
            result = {};
            if (typeof data[\\"a\\"] !== null) {
                errors.push({
                    path: \\"data.a\\",
                    message: \`not null\`
                });
            }
            else
                result[\\"a\\"] = data[\\"a\\"];
        }
        if (errors.length) {
            return {
                ok: false,
                errors
            };
        }
        return {
            ok: true,
            result: result as MyModel
        };
    }
}"
`;

exports[`Parsers for a type alias object literal number array member 1`] = `
"export class MyModelParser {
    static parse(data: any): ParseResult<MyModel> {
        const errors: ValidationError[] = [];
        let result: any;
        if (typeof data !== \\"object\\" || data === null) {
            errors.push({
                path: \\"data\\",
                message: \`null or not an object\`
            });
        }
        else {
            result = {};
            if (typeof data[\\"a\\"] !== \\"object\\" || data[\\"a\\"] === null) {
                errors.push({
                    path: \\"data.a\\",
                    message: \`not an array\`
                });
            }
            else {
                result[\\"a\\"] = [];
                for (let it_0 = 0; it_0 < data[\\"a\\"].length; it_0++)
                    if (typeof data[\\"a\\"][it_0] !== \\"number\\") {
                        errors.push({
                            path: \`data.a[\${it_0}]\`,
                            message: \`not a number\`
                        });
                    }
                    else if (isNaN(data[\\"a\\"][it_0])) {
                        errors.push({
                            path: \`data.a[\${it_0}]\`,
                            message: \`invalid number\`
                        });
                    }
                    else
                        result[\\"a\\"][it_0] = data[\\"a\\"][it_0];
            }
        }
        if (errors.length) {
            return {
                ok: false,
                errors
            };
        }
        return {
            ok: true,
            result: result as MyModel
        };
    }
}"
`;

exports[`Parsers for a type alias object literal number literal member 1`] = `
"export class MyModelParser {
    static parse(data: any): ParseResult<MyModel> {
        const errors: ValidationError[] = [];
        let result: any;
        if (typeof data !== \\"object\\" || data === null) {
            errors.push({
                path: \\"data\\",
                message: \`null or not an object\`
            });
        }
        else {
            result = {};
            if (data[\\"a\\"] !== 123) {
                errors.push({
                    path: \\"data.a\\",
                    message: \`not 123\`
                });
            }
            else
                result[\\"a\\"] = data[\\"a\\"];
        }
        if (errors.length) {
            return {
                ok: false,
                errors
            };
        }
        return {
            ok: true,
            result: result as MyModel
        };
    }
}"
`;

exports[`Parsers for a type alias object literal number member 1`] = `
"export class MyModelParser {
    static parse(data: any): ParseResult<MyModel> {
        const errors: ValidationError[] = [];
        let result: any;
        if (typeof data !== \\"object\\" || data === null) {
            errors.push({
                path: \\"data\\",
                message: \`null or not an object\`
            });
        }
        else {
            result = {};
            if (typeof data[\\"a\\"] !== \\"number\\") {
                errors.push({
                    path: \\"data.a\\",
                    message: \`not a number\`
                });
            }
            else if (isNaN(data[\\"a\\"])) {
                errors.push({
                    path: \\"data.a\\",
                    message: \`invalid number\`
                });
            }
            else
                result[\\"a\\"] = data[\\"a\\"];
        }
        if (errors.length) {
            return {
                ok: false,
                errors
            };
        }
        return {
            ok: true,
            result: result as MyModel
        };
    }
}"
`;

exports[`Parsers for a type alias object literal number model 1`] = `
"export class MyModelParser {
    static parse(data: any): ParseResult<MyModel> {
        const errors: ValidationError[] = [];
        let result: any;
        if (typeof data !== \\"number\\") {
            errors.push({
                path: \\"data\\",
                message: \`not a number\`
            });
        }
        else if (isNaN(data)) {
            errors.push({
                path: \\"data\\",
                message: \`invalid number\`
            });
        }
        else
            result = data;
        if (errors.length) {
            return {
                ok: false,
                errors
            };
        }
        return {
            ok: true,
            result: result as MyModel
        };
    }
}"
`;

exports[`Parsers for a type alias object literal object literal member 1`] = `
"export class MyModelParser {
    static parse(data: any): ParseResult<MyModel> {
        const errors: ValidationError[] = [];
        let result: any;
        if (typeof data !== \\"object\\" || data === null) {
            errors.push({
                path: \\"data\\",
                message: \`null or not an object\`
            });
        }
        else {
            result = {};
            if (typeof data[\\"a\\"] !== \\"object\\" || data[\\"a\\"] === null) {
                errors.push({
                    path: \\"data.a\\",
                    message: \`not an array\`
                });
            }
            else {
                result[\\"a\\"] = [];
                for (let it_0 = 0; it_0 < data[\\"a\\"].length; it_0++)
                    if (typeof data[\\"a\\"][it_0] !== \\"object\\" || data[\\"a\\"][it_0] === null) {
                        errors.push({
                            path: \`data.a[\${it_0}]\`,
                            message: \`null or not an object\`
                        });
                    }
                    else {
                        result[\\"a\\"][it_0] = {};
                        if (typeof data[\\"a\\"][it_0][\\"b\\"] !== \\"number\\") {
                            errors.push({
                                path: \`data.a[\${it_0}].b\`,
                                message: \`not a number\`
                            });
                        }
                        else if (isNaN(data[\\"a\\"][it_0][\\"b\\"])) {
                            errors.push({
                                path: \`data.a[\${it_0}].b\`,
                                message: \`invalid number\`
                            });
                        }
                        else
                            result[\\"a\\"][it_0][\\"b\\"] = data[\\"a\\"][it_0][\\"b\\"];
                    }
            }
        }
        if (errors.length) {
            return {
                ok: false,
                errors
            };
        }
        return {
            ok: true,
            result: result as MyModel
        };
    }
}"
`;

exports[`Parsers for a type alias object literal optional member 1`] = `
"export class MyModelParser {
    static parse(data: any): ParseResult<MyModel> {
        const errors: ValidationError[] = [];
        let result: any;
        if (typeof data !== \\"object\\" || data === null) {
            errors.push({
                path: \\"data\\",
                message: \`null or not an object\`
            });
        }
        else {
            result = {};
            if (data[\\"a\\"] !== undefined)
                if (typeof data[\\"a\\"] !== \\"string\\") {
                    errors.push({
                        path: \\"data.a\\",
                        message: \`not a string\`
                    });
                }
                else
                    result[\\"a\\"] = data[\\"a\\"];
        }
        if (errors.length) {
            return {
                ok: false,
                errors
            };
        }
        return {
            ok: true,
            result: result as MyModel
        };
    }
}"
`;

exports[`Parsers for a type alias object literal optional object literal member 1`] = `
"export class MyModelParser {
    static parse(data: any): ParseResult<MyModel> {
        const errors: ValidationError[] = [];
        let result: any;
        if (typeof data !== \\"object\\" || data === null) {
            errors.push({
                path: \\"data\\",
                message: \`null or not an object\`
            });
        }
        else {
            result = {};
            if (data[\\"a\\"] !== undefined)
                if (typeof data[\\"a\\"] !== \\"object\\" || data[\\"a\\"] === null) {
                    errors.push({
                        path: \\"data.a\\",
                        message: \`not an array\`
                    });
                }
                else {
                    result[\\"a\\"] = [];
                    for (let it_0 = 0; it_0 < data[\\"a\\"].length; it_0++)
                        if (typeof data[\\"a\\"][it_0] !== \\"object\\" || data[\\"a\\"][it_0] === null) {
                            errors.push({
                                path: \`data.a[\${it_0}]\`,
                                message: \`null or not an object\`
                            });
                        }
                        else {
                            result[\\"a\\"][it_0] = {};
                            if (typeof data[\\"a\\"][it_0][\\"b\\"] !== \\"number\\") {
                                errors.push({
                                    path: \`data.a[\${it_0}].b\`,
                                    message: \`not a number\`
                                });
                            }
                            else if (isNaN(data[\\"a\\"][it_0][\\"b\\"])) {
                                errors.push({
                                    path: \`data.a[\${it_0}].b\`,
                                    message: \`invalid number\`
                                });
                            }
                            else
                                result[\\"a\\"][it_0][\\"b\\"] = data[\\"a\\"][it_0][\\"b\\"];
                        }
                }
        }
        if (errors.length) {
            return {
                ok: false,
                errors
            };
        }
        return {
            ok: true,
            result: result as MyModel
        };
    }
}"
`;

exports[`Parsers for a type alias object literal optional object literal with optional member 1`] = `
"export class MyModelParser {
    static parse(data: any): ParseResult<MyModel> {
        const errors: ValidationError[] = [];
        let result: any;
        if (typeof data !== \\"object\\" || data === null) {
            errors.push({
                path: \\"data\\",
                message: \`null or not an object\`
            });
        }
        else {
            result = {};
            if (data[\\"a\\"] !== undefined)
                if (typeof data[\\"a\\"] !== \\"object\\" || data[\\"a\\"] === null) {
                    errors.push({
                        path: \\"data.a\\",
                        message: \`null or not an object\`
                    });
                }
                else {
                    result[\\"a\\"] = {};
                    if (data[\\"a\\"][\\"b\\"] !== undefined)
                        if (typeof data[\\"a\\"][\\"b\\"] !== \\"number\\") {
                            errors.push({
                                path: \\"data.a.b\\",
                                message: \`not a number\`
                            });
                        }
                        else if (isNaN(data[\\"a\\"][\\"b\\"])) {
                            errors.push({
                                path: \\"data.a.b\\",
                                message: \`invalid number\`
                            });
                        }
                        else
                            result[\\"a\\"][\\"b\\"] = data[\\"a\\"][\\"b\\"];
                }
        }
        if (errors.length) {
            return {
                ok: false,
                errors
            };
        }
        return {
            ok: true,
            result: result as MyModel
        };
    }
}"
`;

exports[`Parsers for a type alias object literal optional string array member 1`] = `
"export class MyModelParser {
    static parse(data: any): ParseResult<MyModel> {
        const errors: ValidationError[] = [];
        let result: any;
        if (typeof data !== \\"object\\" || data === null) {
            errors.push({
                path: \\"data\\",
                message: \`null or not an object\`
            });
        }
        else {
            result = {};
            if (data[\\"a\\"] !== undefined)
                if (typeof data[\\"a\\"] !== \\"object\\" || data[\\"a\\"] === null) {
                    errors.push({
                        path: \\"data.a\\",
                        message: \`not an array\`
                    });
                }
                else {
                    result[\\"a\\"] = [];
                    for (let it_0 = 0; it_0 < data[\\"a\\"].length; it_0++)
                        if (typeof data[\\"a\\"][it_0] !== \\"string\\") {
                            errors.push({
                                path: \`data.a[\${it_0}]\`,
                                message: \`not a string\`
                            });
                        }
                        else
                            result[\\"a\\"][it_0] = data[\\"a\\"][it_0];
                }
        }
        if (errors.length) {
            return {
                ok: false,
                errors
            };
        }
        return {
            ok: true,
            result: result as MyModel
        };
    }
}"
`;

exports[`Parsers for a type alias object literal string array member 1`] = `
"export class MyModelParser {
    static parse(data: any): ParseResult<MyModel> {
        const errors: ValidationError[] = [];
        let result: any;
        if (typeof data !== \\"object\\" || data === null) {
            errors.push({
                path: \\"data\\",
                message: \`null or not an object\`
            });
        }
        else {
            result = {};
            if (typeof data[\\"a\\"] !== \\"object\\" || data[\\"a\\"] === null) {
                errors.push({
                    path: \\"data.a\\",
                    message: \`not an array\`
                });
            }
            else {
                result[\\"a\\"] = [];
                for (let it_0 = 0; it_0 < data[\\"a\\"].length; it_0++)
                    if (typeof data[\\"a\\"][it_0] !== \\"string\\") {
                        errors.push({
                            path: \`data.a[\${it_0}]\`,
                            message: \`not a string\`
                        });
                    }
                    else
                        result[\\"a\\"][it_0] = data[\\"a\\"][it_0];
            }
        }
        if (errors.length) {
            return {
                ok: false,
                errors
            };
        }
        return {
            ok: true,
            result: result as MyModel
        };
    }
}"
`;

exports[`Parsers for a type alias object literal string literal member 1`] = `
"export class MyModelParser {
    static parse(data: any): ParseResult<MyModel> {
        const errors: ValidationError[] = [];
        let result: any;
        if (typeof data !== \\"object\\" || data === null) {
            errors.push({
                path: \\"data\\",
                message: \`null or not an object\`
            });
        }
        else {
            result = {};
            if (data[\\"a\\"] !== \\"xxx\\") {
                errors.push({
                    path: \\"data.a\\",
                    message: \`not 'xxx'\`
                });
            }
            else
                result[\\"a\\"] = data[\\"a\\"];
        }
        if (errors.length) {
            return {
                ok: false,
                errors
            };
        }
        return {
            ok: true,
            result: result as MyModel
        };
    }
}"
`;

exports[`Parsers for a type alias object literal string member 1`] = `
"export class MyModelParser {
    static parse(data: any): ParseResult<MyModel> {
        const errors: ValidationError[] = [];
        let result: any;
        if (typeof data !== \\"object\\" || data === null) {
            errors.push({
                path: \\"data\\",
                message: \`null or not an object\`
            });
        }
        else {
            result = {};
            if (typeof data[\\"a\\"] !== \\"string\\") {
                errors.push({
                    path: \\"data.a\\",
                    message: \`not a string\`
                });
            }
            else
                result[\\"a\\"] = data[\\"a\\"];
        }
        if (errors.length) {
            return {
                ok: false,
                errors
            };
        }
        return {
            ok: true,
            result: result as MyModel
        };
    }
}"
`;

exports[`Parsers for a type alias object literal true literal member 1`] = `
"export class MyModelParser {
    static parse(data: any): ParseResult<MyModel> {
        const errors: ValidationError[] = [];
        let result: any;
        if (typeof data !== \\"object\\" || data === null) {
            errors.push({
                path: \\"data\\",
                message: \`null or not an object\`
            });
        }
        else {
            result = {};
            if (data[\\"a\\"] !== true) {
                errors.push({
                    path: \\"data.a\\",
                    message: \`not true\`
                });
            }
            else
                result[\\"a\\"] = data[\\"a\\"];
        }
        if (errors.length) {
            return {
                ok: false,
                errors
            };
        }
        return {
            ok: true,
            result: result as MyModel
        };
    }
}"
`;

exports[`Parsers for a type alias object literal with no members 1`] = `
"export class MyModelParser {
    static parse(data: any): ParseResult<MyModel> {
        const errors: ValidationError[] = [];
        let result: any;
        if (typeof data !== \\"object\\" || data === null) {
            errors.push({
                path: \\"data\\",
                message: \`null or not an object\`
            });
        }
        else {
            result = {};
        }
        if (errors.length) {
            return {
                ok: false,
                errors
            };
        }
        return {
            ok: true,
            result: result as MyModel
        };
    }
}"
`;

exports[`Parsers for a type alias tuple simple 1`] = `
"export class MyModelParser {
    static parse(data: any): ParseResult<MyModel> {
        const errors: ValidationError[] = [];
        let result: any;
        if (typeof data !== \\"object\\" || data === null) {
            errors.push({
                path: \\"data\\",
                message: \`null or not an object\`
            });
        }
        else {
            result = [];
            if (typeof data[0] !== \\"string\\") {
                errors.push({
                    path: \`data[\${0}]\`,
                    message: \`not a string\`
                });
            }
            else
                result[0] = data[0];
            if (typeof data[1] !== \\"number\\") {
                errors.push({
                    path: \`data[\${1}]\`,
                    message: \`not a number\`
                });
            }
            else if (isNaN(data[1])) {
                errors.push({
                    path: \`data[\${1}]\`,
                    message: \`invalid number\`
                });
            }
            else
                result[1] = data[1];
        }
        if (errors.length) {
            return {
                ok: false,
                errors
            };
        }
        return {
            ok: true,
            result: result as MyModel
        };
    }
}"
`;

exports[`Parsers for a type alias tuple tuple with typealias 1`] = `
"export class MyModelParser {
    static parse(data: any): ParseResult<MyModel> {
        const errors: ValidationError[] = [];
        let result: any;
        if (typeof data !== \\"object\\" || data === null) {
            errors.push({
                path: \\"data\\",
                message: \`null or not an object\`
            });
        }
        else {
            result = [];
            if (typeof data[0] !== \\"string\\") {
                errors.push({
                    path: \`data[\${0}]\`,
                    message: \`not a string\`
                });
            }
            else
                result[0] = data[0];
            if (typeof data[1] !== \\"object\\" || data[1] === null) {
                errors.push({
                    path: \`data[\${1}]\`,
                    message: \`null or not an object\`
                });
            }
            else {
                result[1] = {};
                if (typeof data[1][\\"a\\"] !== \\"number\\") {
                    errors.push({
                        path: \`data[\${1}].a\`,
                        message: \`not a number\`
                    });
                }
                else if (isNaN(data[1][\\"a\\"])) {
                    errors.push({
                        path: \`data[\${1}].a\`,
                        message: \`invalid number\`
                    });
                }
                else
                    result[1][\\"a\\"] = data[1][\\"a\\"];
            }
        }
        if (errors.length) {
            return {
                ok: false,
                errors
            };
        }
        return {
            ok: true,
            result: result as MyModel
        };
    }
}"
`;

exports[`Parsers for a type alias tuple tuple within tuple 1`] = `
"export class MyModelParser {
    static parse(data: any): ParseResult<MyModel> {
        const errors: ValidationError[] = [];
        let result: any;
        if (typeof data !== \\"object\\" || data === null) {
            errors.push({
                path: \\"data\\",
                message: \`null or not an object\`
            });
        }
        else {
            result = [];
            if (typeof data[0] !== \\"string\\") {
                errors.push({
                    path: \`data[\${0}]\`,
                    message: \`not a string\`
                });
            }
            else
                result[0] = data[0];
            if (typeof data[1] !== \\"object\\" || data[1] === null) {
                errors.push({
                    path: \`data[\${1}]\`,
                    message: \`null or not an object\`
                });
            }
            else {
                result[1] = [];
                if (typeof data[1][0] !== \\"object\\" || data[1][0] === null) {
                    errors.push({
                        path: \`data[\${1}][\${0}]\`,
                        message: \`null or not an object\`
                    });
                }
                else {
                    result[1][0] = {};
                    if (typeof data[1][0][\\"a\\"] !== \\"number\\") {
                        errors.push({
                            path: \`data[\${1}][\${0}].a\`,
                            message: \`not a number\`
                        });
                    }
                    else if (isNaN(data[1][0][\\"a\\"])) {
                        errors.push({
                            path: \`data[\${1}][\${0}].a\`,
                            message: \`invalid number\`
                        });
                    }
                    else
                        result[1][0][\\"a\\"] = data[1][0][\\"a\\"];
                }
                if (typeof data[1][1] !== \\"boolean\\") {
                    errors.push({
                        path: \`data[\${1}][\${1}]\`,
                        message: \`not a boolean\`
                    });
                }
                else
                    result[1][1] = data[1][1];
            }
        }
        if (errors.length) {
            return {
                ok: false,
                errors
            };
        }
        return {
            ok: true,
            result: result as MyModel
        };
    }
}"
`;
